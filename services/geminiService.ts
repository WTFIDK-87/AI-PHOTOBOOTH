import { GoogleGenAI, Modality } from "@google/genai";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

/**
 * Transforms an image using a generative AI model based on a prompt.
 * @param base64Data The base64 encoded image data.
 * @param mimeType The MIME type of the image.
 * @param prompt The transformation instructions.
 * @returns A promise that resolves to the URL of the transformed image.
 */
export async function transformImage(base64Data: string, mimeType: string, prompt: string): Promise<{ imageUrl: string }> {
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          {
            inlineData: {
              data: base64Data,
              mimeType: mimeType,
            },
          },
          {
            text: prompt,
          },
        ],
      },
      config: {
          responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates?.[0]?.content?.parts || []) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        return { imageUrl: `data:${part.inlineData.mimeType};base64,${base64ImageBytes}` };
      }
    }
    
    throw new Error('No image was generated by the API.');

  } catch (error) {
    console.error('Error transforming image with Gemini:', error);
    // Add more specific error handling if needed, e.g., for safety blocks
    if (error instanceof Error && error.message.includes('SAFETY')) {
        throw new Error('The request was blocked due to safety settings. Please try a different photo.');
    }
    throw new Error('Failed to transform image. The potion might have spoiled!');
  }
}
